{"version":3,"sources":["worker/Parent.worker.ts","container/StateContainer.ts","components/InputVideo.tsx","components/PositionSetter.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","createContainer","useState","fileUrl","setFileUrl","phase","value","progress","setProgress","startPos","setStartPos","setProgressValue","incrementProgressPhase","resetProgress","endPos","setEndPos","onChange","e","setFilename","state","file","files","target","item","name","prevFileUrl","URL","revokeObjectURL","createObjectURL","recreateFileUrl","InputVideo","StateContainer","useContainer","filename","disabled","className","htmlFor","Button","variant","component","FolderOpen","id","type","accept","PositionSetter","style","display","alignItems","Typography","verticalAlign","TextField","label","size","width","waitVideoLoad","async","$video","readyState","Promise","resolve","oncanplay","exec","$output","params","URLSearchParams","window","location","search","slice","pTimeFlag","get","debugFlag","wasmFlag","singleThreadFlag","imgb","createImageBitmap","height","innerHTML","$canvas","document","createElement","appendChild","console","log","duration","output","transferControlToOffscreen","bodyPix","config","outputCanvas","concurrency","WrappedBodyPix","wrap","ParentWorkerAbstract","init","transfer","getBodyPix","useWasm","Math","max","navigator","hardwareConcurrency","startTime","performance","now","run","proxy","img","currentTime","warn","endTime","info","App","useRef","Paper","Grid","container","direction","justify","spacing","xs","color","onClick","current","KeyboardArrowRight","CircularProgress","LinearProgress","toFixed","src","controls","ref","Boolean","hostname","match","ReactDOM","render","Provider","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5788198.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"206b5e87bc011813b4b7.worker.js\");\n};","import { createContainer } from 'unstated-next'\nimport { useState } from 'react'\n\ninterface Progress {\n  phase: number\n  value: number\n}\n\nexport default createContainer(() => {\n  const [fileUrl, setFileUrl] = useState('')\n\n  const [progress, setProgress] = useState<Progress>({\n    phase: 0,\n    value: 0\n  })\n  const setProgressValue = (value: number) =>\n    setProgress(progress => ({ ...progress, value }))\n  const incrementProgressPhase = () =>\n    setProgress(progress => ({ ...progress, phase: progress.phase + 1 }))\n  const resetProgress = () => setProgress({ phase: 0, value: 0 })\n\n  const [startPos, setStartPos] = useState(0)\n  const [endPos, setEndPos] = useState(0)\n\n  return {\n    fileUrl,\n    setFileUrl,\n    progress,\n    setProgressValue,\n    incrementProgressPhase,\n    resetProgress,\n    startPos,\n    setStartPos,\n    endPos,\n    setEndPos\n  }\n})\n","import React, { FC, useState, ChangeEvent, Dispatch } from 'react'\nimport StateContainer from '../container/StateContainer'\nimport { Button } from '@material-ui/core'\nimport { FolderOpen } from '@material-ui/icons'\n\nconst NO_FILE = '選択されていません'\n\nconst recreateFileUrl = (\n  setFileUrl: Dispatch<string>,\n  file: File | null,\n  prevFileUrl: string\n) => {\n  if (prevFileUrl !== '') {\n    URL.revokeObjectURL(prevFileUrl)\n  }\n  setFileUrl(file ? URL.createObjectURL(file) : '')\n}\n\nconst onChange = (\n  e: ChangeEvent<HTMLInputElement>,\n  setFilename: Dispatch<string>,\n  state: ReturnType<typeof StateContainer.useContainer>\n) => {\n  let file = null\n  const { files } = e.target\n  if (files) {\n    file = files.item(0)\n    if (file) {\n      setFilename(file.name)\n    }\n  }\n  if (file == null) {\n    setFilename(NO_FILE)\n  }\n  recreateFileUrl(state.setFileUrl, file, state.fileUrl)\n}\n\nconst InputVideo: FC<{}> = () => {\n  const state = StateContainer.useContainer()\n  const [filename, setFilename] = useState(NO_FILE)\n\n  const disabled = state.progress.value > 0\n\n  return (\n    <div className=\"input-video\">\n      <label htmlFor=\"input-file-dom\">\n        <Button variant=\"contained\" component=\"span\" disabled={disabled}>\n          <FolderOpen />\n          ファイルを選択: <span className=\"filename\">{filename}</span>\n        </Button>\n      </label>\n      <input\n        id=\"input-file-dom\"\n        type=\"file\"\n        accept=\"video/*\"\n        disabled={disabled}\n        onChange={e => onChange(e, setFilename, state)}\n      />\n    </div>\n  )\n}\n\nexport default InputVideo\n","import React, { FC, ChangeEventHandler } from 'react'\nimport StateContainer from '../container/StateContainer'\nimport { TextField, Typography } from '@material-ui/core'\n\nconst PositionSetter: FC<{}> = () => {\n  const state = StateContainer.useContainer()\n\n  const handleStartPosChange: ChangeEventHandler<HTMLInputElement> = e => {\n    state.setStartPos(+e.target.value)\n  }\n  const handleEndPosChange: ChangeEventHandler<HTMLInputElement> = e => {\n    state.setEndPos(+e.target.value)\n  }\n\n  return (\n    <div\n      className=\"position-setter\"\n      style={{ display: 'flex', alignItems: 'center' }}\n    >\n      <Typography\n        variant=\"subtitle1\"\n        component=\"span\"\n        style={{ verticalAlign: 'middle' }}\n      >\n        Position:{' '}\n      </Typography>\n      <TextField\n        label=\"Start\"\n        type=\"number\"\n        value={state.startPos}\n        size=\"small\"\n        variant=\"filled\"\n        onChange={handleStartPosChange}\n        style={{ width: '5em' }}\n      />\n      <TextField\n        label=\"End\"\n        type=\"number\"\n        value={state.endPos}\n        size=\"small\"\n        variant=\"filled\"\n        onChange={handleEndPosChange}\n        style={{ width: '5em' }}\n      />\n    </div>\n  )\n}\n\nexport default PositionSetter\n","import React, { FC, useRef } from 'react'\nimport './App.sass'\nimport InputVideo from './InputVideo'\nimport StateContainer from '../container/StateContainer'\n\nimport {\n  Paper,\n  Grid,\n  Typography,\n  Button,\n  CircularProgress,\n  LinearProgress\n} from '@material-ui/core'\nimport { KeyboardArrowRight } from '@material-ui/icons'\n\nimport ParentWorkerAbstract, {\n  ParentWorker,\n  Config\n} from '../worker/Parent.worker'\nimport { wrap, transfer, proxy } from 'comlink'\nimport PositionSetter from './PositionSetter'\n\nconst getBodyPix = async (\n  config: Config,\n  outputCanvas: OffscreenCanvas,\n  concurrency: number\n) => {\n  const WrappedBodyPix = wrap<typeof ParentWorker>(new ParentWorkerAbstract())\n  const bodyPix = await new WrappedBodyPix()\n  await bodyPix.init(\n    config,\n    transfer(outputCanvas, [(outputCanvas as unknown) as Transferable]),\n    concurrency\n  )\n  return bodyPix\n}\n\nconst waitVideoLoad = async ($video: HTMLVideoElement) => {\n  if ($video.readyState < 3) {\n    await new Promise(resolve => {\n      $video.oncanplay = resolve\n    })\n  }\n}\n\nconst exec = async (\n  $video: HTMLVideoElement,\n  $output: HTMLDivElement,\n  state: ReturnType<typeof StateContainer.useContainer>\n) => {\n  const params = new URLSearchParams(window.location.search.slice(1))\n  const pTimeFlag = params.get('p_time') === 'true'\n  const debugFlag = params.get('debug') === 'true'\n  const wasmFlag = params.get('wasm') === 'true'\n  const singleThreadFlag = params.get('single') === 'true'\n\n  await waitVideoLoad($video)\n  const imgb = await createImageBitmap($video)\n  const { width, height } = imgb\n\n  $output.innerHTML = ''\n  const $canvas = document.createElement('canvas')\n  $canvas.width = width\n  $canvas.height = height\n  $output.appendChild($canvas)\n  if (debugFlag) console.log(width, height)\n\n  const { duration } = $video\n  const output = $canvas.transferControlToOffscreen()\n\n  const bodyPix = await getBodyPix(\n    {\n      width,\n      height,\n      duration,\n      debugFlag,\n      startPos: state.startPos,\n      endPos: state.endPos,\n      useWasm: wasmFlag\n    },\n    output,\n    singleThreadFlag ? 1 : Math.max(navigator.hardwareConcurrency - 1, 1)\n  )\n\n  let startTime = 0\n  if (pTimeFlag) {\n    startTime = performance.now()\n  }\n\n  return new Promise(resolve => {\n    const retryFromStart = () => {\n      $video.currentTime = state.startPos\n      state.incrementProgressPhase()\n    }\n    const sendCurrentImage = async () => {\n      await waitVideoLoad($video)\n      try {\n        const img = await createImageBitmap($video)\n        return transfer([img, $video.currentTime], [img])\n      } catch (e) {\n        console.warn(e)\n      }\n      return null\n    }\n    const tick = () => {\n      $video.currentTime++\n    }\n    const notifyProgress = (progress: number) => {\n      if (progress === -1) {\n        if (pTimeFlag) {\n          const endTime = performance.now()\n          console.info(`Elapsed Time: ${(endTime - startTime) / 1000}s`)\n        }\n        resolve()\n        return\n      }\n      if (debugFlag) console.log((progress / (width * height)) * 100)\n      state.setProgressValue((progress / (width * height)) * 100)\n    }\n\n    bodyPix.run(\n      proxy(sendCurrentImage),\n      proxy(retryFromStart),\n      proxy(tick),\n      proxy(notifyProgress)\n    )\n  })\n}\n\nconst App: FC = () => {\n  const state = StateContainer.useContainer()\n\n  const $video = useRef<HTMLVideoElement>(null)\n  const $output = useRef<HTMLDivElement>(null)\n\n  return (\n    <Paper id=\"app\">\n      <Typography variant=\"h5\" component=\"h1\">\n        Extract background\n      </Typography>\n      <Typography component=\"p\">\n        動画から人物(一人に限る)を取り除いた背景を抽出します。\n        定点からの映像でしか正常に動作しません。\n        また、Chromeでしか動作しません。\n        快適な動作にはそこそこのスペックを要求します。\n        Positionは処理に利用しない前後の秒数を指定できます。\n      </Typography>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        spacing={1}\n      >\n        <Grid item xs={12}>\n          <PositionSetter />\n        </Grid>\n        <Grid item>\n          <InputVideo />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={state.fileUrl === '' || state.progress.phase !== 0}\n            onClick={async () => {\n              if ($video.current && $output.current) {\n                await exec($video.current, $output.current, state)\n                state.resetProgress()\n              }\n            }}\n          >\n            開始\n            <KeyboardArrowRight />\n            {state.progress.phase !== 0 && (\n              <CircularProgress size={24} className=\"button-loading\" />\n            )}\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        spacing={1}\n      >\n        <Grid item xs>\n          <LinearProgress variant=\"determinate\" value={state.progress.value} />\n        </Grid>\n        <Grid item>{state.progress.value.toFixed(4)}%</Grid>\n      </Grid>\n      <video id=\"input\" src={state.fileUrl} controls ref={$video} />\n      <div id=\"output\" ref={$output}></div>\n    </Paper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.sass'\nimport App from './components/App'\nimport StateContainer from './container/StateContainer'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <StateContainer.Provider>\n    <App />\n  </StateContainer.Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}